#!/usr/bin/env python3

import sys
import math

def translation(k, matrice):
    i = int(sys.argv[k + 1])
    j = int(sys.argv[k + 2])
    print("Translation along vector ({}, {})".format(i, j))
    matrice[0][2] = i
    matrice[1][2] = j
    return(matrice)
def scale(i, matrice):
    m = int(sys.argv[i + 1])
    n = int(sys.argv[i + 2])
    print("Scaling by factors {} and {}".format(m, n))
    matrice[0][0] = matrice[0][0] * m
    matrice[1][1] = matrice[1][1] * n
    return(matrice)

def rotate(i, matrice):
    d = int(sys.argv[i + 1])
    print("Rotaion by a {} degree angle".format(d))
    d = math.radians(d)
    matrice[0][0] = math.cos(d)
    matrice[1][1] = math.cos(d)
    matrice[0][1] = -math.sin(d)
    matrice[1][0] = math.sin(d)
    return(matrice)

def refl(i, matrice):
    d =	int(sys.argv[i + 1])
    print("Reflection over an axis with an inclination angle of {} degrees".format(d))
    d =	math.radians(d)
    matrice[0][0] = math.cos(2 * d)
    matrice[1][1] = -math.cos(2 * d)
    matrice[0][1] = math.sin(2 * d)
    matrice[1][0] = math.sin(2 * d)
    return(matrice)

def calctransfo(matrice, x, y):
    x2 = x * matrice[0][0] + y * matrice[0][1] + matrice[0][2]
    y2 = x * matrice[1][0] + y * matrice[1][1] + matrice[1][2]
    return(x2, y2)

def check(matrice):
    i = 0
    while i < 3:
        j = 0
        while j < 3:
            if matrice[i][j] <= 0:
                nc = str(matrice[i][j])
                print(nc)
                if len(nc) > 5:
                    if nc[1] == "0" and nc[3] == "0" and nc[4] == "0" or "e-" in nc:
                        matrice[i][j] = 0.00
            j += 1
        i += 1
    return(matrice)

def affichage(x, y, x2, y2, matrice):
    i = 0
    matrice = check(matrice)
    while i < 3:
        if matrice[i][0] < 0:
            sp1 = "   "
        else:
            sp1 = "    "
        if matrice[i][1] < 0:
            sp2 = "   "
        else:
            sp2 = "    "
        print("{:.2f}".format(matrice[i][0]), sp1, "{:.2f}".format(matrice[i][1]), sp2, "{:.2f}".format(matrice[i][2]))
        i += 1
    print("({}, {}) => ({:.2f}, {:.2f})".format(x, y, x2, y2))

def test_flag(matrice):
    i = 3
    while i + 1 <= len(sys.argv):
        if sys.argv[i] == "-t":
            matrice = translation(i, matrice)
            i = i + 3
        elif sys.argv[i] == "-z":
            matrice = scale(i, matrice)
            i = i + 3
        elif sys.argv[i] == "-r":
            matrice = rotate(i, matrice)
            i = i + 2
        elif sys.argv[i] == "-s":
            matrice = refl(i, matrice)
            i = i + 2
        else:
            exit (84)
    return(matrice)

if len(sys.argv) > 1 :
    if sys.argv[1] == "-h":
        print("USAGE\n./102architect x y transfo1 arg11 [arg12] [transfo2 arg12 [arg22]] ...\n\nDESCRIPTION\n    x      absissa of the original point\n    y      ordinate of the original point\n\n    transfo arg1 [arg2]\n    -t i j      transletion along vector (i, j)\n    -z m n      scaling by factors m (x-axis) and n (y-axis)\n    -r d        rototion centred in 0 by a d degree angle\n    -s d        reflection over the axis pasing trough 0 with an inclination\n                angle of d degrees")
        exit (0)
    elif len(sys.argv) > 2 :
        x = int(sys.argv[1])
        y = int(sys.argv[2])
        matrice = [3 * [0] for i in range(3)]
        matrice[0][0] = 1
        matrice[1][1] = 1
        matrice[2][2] = 1
        matrice = test_flag(matrice)
        x2, y2 = calctransfo(matrice, x, y)
        affichage(x, y, x2, y2, matrice)
    else :
        exit (84)
else :
    exit (84)
